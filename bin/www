#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('authentication:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var events = require('events');
var ip = require('../node_modules/ip');
var five = require('../node_modules/johnny-five');
var ThingSpeak = require('../node_modules/thingspeakclient');
var weather = require('../extras/weather');
var spawn = require('child_process').spawn;
var Record = require('../models/recordSensorData');

var board, soilSensor, soilValue, led, ldr, ldrVal, temp, city_name, current_tempr, rainy, imgUrl, humidity;
var currTime, isDay, sunny, relay, dayLight, manual, current_pump_state, last_update_time, wind_speed, evening;

const led_pin = 10;
const relay_pin = 11;
const soil_sensor_pin = "A0";
const ldr_pin = "A2";
const opts = {
    key: fs.readFileSync(__dirname + '/ssl/server.key'),
    cert: fs.readFileSync(__dirname + '/ssl/server.crt')
  };
var eventEmitter = new events.EventEmitter();
var client = new ThingSpeak();
var noClients = 0;
var startFlag = true;
const recordInterval = 1000 * 60 * 10; // Inserting data every 10min

var channelID = 687385;
var writeKey = 'ZR8A9S3ALIDSIMRN';

// Recording the data every now and then
setInterval(function(){
    var recordData = {
        whichUser: require('../routes/users').userName,
        soil: soilValue,
        light: ldrVal,
        temp: current_tempr,
        wind: wind_speed,
        humidity: humidity
    };
    if(recordData.whichUser && recordData.soil != null && recordData.light != null){
        Record.create(recordData, function(err, data){
            if(err) throw err;
        });
    }
}, recordInterval);

board = new five.Board();

// Connect to your ThingSpeak account using the ThingSpeakClient
client.attachChannel(channelID, {writeKey: writeKey}, function (err){
  if (!err) {
      console.log(`Successfully connected to ThingSpeak`);
      eventEmitter.emit('weatherEvent');
  }
  else {
      console.log(`Cannot connect to ThingSpeak!!`);
  }
});

// Check the weather forecast every 2seconds
setInterval(function(){
  humidity = weather.humidity;
  city_name = weather.city;
  current_tempr = weather.tempr;
  imgUrl = weather.url;
  wind_speed = weather.wind;
  last_update_time = weather.all.current.observationtime;

  // Check for the current weather that it will rain or not
  if(weather.all.current.skytext === "Rainy") rainy = true;
  else rainy = false;
  // console.log(`Currently in ${city_name}, the temperature is: ${current_tempr}â„ƒ  and it is ${weather.all.current.skytext}`);

},3000);

// Check whether the board is ready to accept the requests
board.on("ready", function () { 
    
  // Read the Soil Moisture Sensor [SMS] data
  soilSensor = new five.Sensor({
      pin: soil_sensor_pin,
      freq: 3000,
  });
  // Read the photo resistor data
  ldr = new five.Sensor({
      pin: ldr_pin,
      freq: 3000
  });

  led = new five.Led(led_pin);
  relay = new five.Relay(relay_pin);
  
  // Take the data from ldr sensor
  ldr.on('data',function(val){
      var date = new Date();
      ldrVal = this.fscaleTo(100, 0).toFixed(2);
      currTime = date.getHours() +"."+ date.getMinutes();
      // console.log("Light intensity: " + this.fscaleTo(100, 0).toFixed(2) + "%");
      
      /* Use this condition to check for the current time range within 11am - 4pm and sunlight intensity
      Number(currTime) >= 11.00 && Number(currTime) <= 16.00 && val < 112*/
      if(Number(currTime) >= 11.00 && Number(currTime) <= 16.00){
          isDay = true;
          if(val < 112){
              // console.log("It's sunny outside");
              sunny = true;
          }
          else{
              // console.log("It's shady outside")
              sunny = false;
          }
      }
      else{
          if(Number(currTime) > 16.00 && Number(currTime) <=18.30){
              isDay = false;
              evening = true;
          }
          else if(Number(currTime) >= 5.00 && Number(currTime) < 11.00){
              // console.log("It is early morning");
              isDay = false;
              sunny = true;
          }
          else{
              // console.log("It is night time");
              isDay = false;
          }
      }
      
      //Updating the ThingSpeak Channel Data [default timeout is 15s]
    //   client.updateChannel(channelID, {field1: soilValue, field2: ldrVal}, function(err, resp) {
    //       if (!err && resp > 0) {
    //           console.log('updated successfully. Entry was: ' + resp + ". Data was: " + soilValue + ", " + ldrVal);
    //       }
    //       else {
    //           console.log("Cannot update to ThingSpeak");
    //       }
    //   });
  });
  
  // This async event is used to check whether the SMS is working properly or not
  soilSensor.on("change", function() {
      temp++;
      checkVal = this.fscaleTo(100, 0).toFixed(2);
  });
  
  // Function to delay the water supply to the plants i.e., 3 Seconds
  var relayOff = function(){
      led.fadeOut();
      relay.off();
      startFlag = true;
  }
  
  // Function to check whether the SMS is working properly or not
  var checkSMS = function(){
      temp = 0;
      var checkVal;
      
      setTimeout(function(){
          if(temp === 0 && checkVal === soilValue){
              console.log(`The soil moisture sensor seems to be not working properly,\nSince it has given the data ${temp} times`);
              eventEmitter.emit("PumpBroke_ManualOn");
          }
      }, 1000);
  }
  
  // Checks whether the SMS is working properly or not for every 10 mins
  setInterval(checkSMS, 600000);
  
  // Perform an action when ever the SMS changes its values
  soilSensor.on("data", function (val) {
      // Converting the SMS values in 0% - 100% value
      soilValue = this.fscaleTo(100, 0).toFixed(2);
      
      // Emitting an event to update the soil and weather values
      eventEmitter.emit('soilEvent');
      eventEmitter.emit('weatherEvent');
      
      if(!manual){
          //If the Moisture level goes below 32% at night then turn the LED and RELAY ON
          if((soilValue <= 32) && (!isDay)){
              led.fadeIn();
              relay.on();
              current_pump_state = true;
              eventEmitter.emit('pumpState');
          }
          //If the Moisture level goes above 74% at night then turn the LED and RELAY OFF
          if(soilValue > 68 && (!isDay) && startFlag){
              setTimeout(relayOff, 3000); // Delaying 3 seconds to turn OFF the Pump
              startFlag = false;
              current_pump_state = false;
              eventEmitter.emit('pumpState');
          }
          if(soilValue > 32 && soilValue <= 68){
              current_pump_state = false;
              eventEmitter.emit('pumpState');    
          }
          //If the Moisture level goes below 22% at day then turn the LED and RELAY ON
          if((soilValue <= 22) && (isDay)){
              led.fadeIn();
              relay.on();
              current_pump_state = true;
              eventEmitter.emit('pumpState');
          }
          //If the Moisture level goes above 74% at day then turn the LED and RELAY OFF
          if(soilValue > 68 && (isDay) && startFlag){
              setTimeout(relayOff, 2000); // Delaying 2 seconds to turn OFF the Pump
              startFlag = false;
              current_pump_state = false;
              eventEmitter.emit('pumpState');
          }
      }
      // console.log("The moisture level is: " + soilValue + "%");
  });
  
  // This Callback is the server program ends
  this.on('exit', function(){
      led.off();
      relay.off();
      console.log("Board is closing!");
  });
});


/**
 * Get port from environment and store in Express.
 */

// app.use(function(req, res, next) {
// 	if (req.secure) {
// 		next();
// 	} else {
// 		res.redirect('https://' + '192.168.43.233' + req.url);
// 	}
// });

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPS server.
 */
// https.createServer(opts, app).listen(443);


/**
 * Create HTTP server.
 */

var server = app.listen(port, function(){
  console.log("connected to http://%s:%s", ip.address(), server.address().port);
});

var io = require('../node_modules/socket.io').listen(server);

// Checking a connection from a client
io.on('connection', function (socket) {
  noClients++;

  socket.on('disconnect', function () {
      //Check for disconnected Users/Clients
      console.log("Client: " + socket.id + " has disconnected")
      noClients--;
  });
  
  eventEmitter.on('soilEvent',function(){
      if(isDay && sunny){
          dayLight = "sunny";
      }
      if(isDay && !sunny){
          dayLight = "cloudy";
      }
      if(!isDay){
          dayLight = "night";
      }
      if(!isDay && sunny){
          dayLight = "early morning";
      }
      if(!isDay && evening){
          dayLight = "evening";
      }
      // Emitting the data to all the clients
      socket.emit('soilValue',{soilData: soilValue, clientNo: noClients, dayData: dayLight, light: ldrVal});
  });

  eventEmitter.on('weatherEvent', function(){
      socket.emit('weatherData', {city: city_name, tempr: current_tempr, update_time: last_update_time, imageUrl: imgUrl, wind: wind_speed, humidity: humidity});
  });

  // Check for the 'pumpOper' event emitted by the client
  socket.on('pumpOper', function(data){
      if(data){
          led.toggle();
          // led.fade({
          //     easing: "linear",
          //     duration: 1000,
          //     cuePoints: [0, 0.2, 0.4, 0.6, 0.8, 1],
          //     keyFrames: [0, 150, 25, 120, 200, 0],
          // });
          relay.toggle();
          current_pump_state = false;
          eventEmitter.emit('pumpState');
      }
      else{
          led.toggle();
          // led.fade({
          //     easing: "linear",
          //     duration: 1500,
          //     cuePoints: [0, 0.2, 0.4, 0.6, 0.8, 1],
          //     keyFrames: [0, 250, 25, 120, 50, 255],
          // });
          relay.toggle();
          current_pump_state = true;
          eventEmitter.emit('pumpState');
      }
  });

  socket.on('manual', function(data){
      manual = data;
  });
  
  eventEmitter.on('pumpState', function(){
      socket.emit('currentPumpState', current_pump_state);
  });

  eventEmitter.on('PumpBroke_ManualOn', function(){
      socket.emit('PumpBroke_ManualOn', true);
  });

  // Listen to the socket event from the clients
  socket.on('micListen', function(data){
      if(data){
          manual = true;
        //   console.log(`Listening to Mic..`);
          var process = spawn('python3', ["../extras/RecieveAudio.py"]);
          process.stdout.on('data', function(pyData) {
              eventEmitter.emit('MicMode', pyData);
          });
      }
      else{
          manual = false;
        //   console.log(`Not Listening to Mic`);
      }
  });
  
  // Fire the event whenever the turn on/ off command is told
  eventEmitter.on('MicMode', function(data){
      if(data.toString() === 'turn off'){
          led.off();
          relay.off();
          current_pump_state = false;
          eventEmitter.emit('pumpState');
      }
      if(data.toString() === 'turn on'){
          led.on();
          relay.on();
          current_pump_state = true;
          eventEmitter.emit('pumpState');
      }
  });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

